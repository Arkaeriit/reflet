--[[--------------------------------------------------
|This file contain code used to transform a line     |
|of assembly code into a structure containung the    |
|number of words in that line and their number. The  |
|functions in this file let us get rid of whitespace.|
|Furthermore, there is a function to convert a whole |
|file into such lines.                               |
----------------------------------------------------]]

require 'string'
require 'stringbuilder'
require 'filestream'
require 'vector'

--constants
local max_number_of_words <comptime> = 50 --The maximum number of words in an line. If there is more words, they will be ignored. More words means that theire is a more serious issur somewhere else
local comment_delimiter <comptime> = ";"

----------------------------------- Data types ---------------------------------

global pure_line = @record{
    len: integer,
    content: [max_number_of_words]string
}

global pure_file = @record{
    content: vector(pure_line)
}

----------------------------------- Data access --------------------------------

function pure_line:__len()
    return self.len
end

function pure_line:__index(i: integer)
    return self.content[i]
end

function pure_line:__tostring()
   local builder: stringbuilder 
   builder:write("len = ")
   builder:write(#self)
   builder:write("; {")
   for i=0,<#self do
       builder:write(self[i])
       if i ~= #self - 1 then
           builder:write(", ")
       end
   end
   builder:write("}")
   return builder:promote()
end

function pure_file:__len()
    return #self.content
end

function pure_file:__index(i: integer)
    return self.content[i]
end

function pure_file:__tostring()
   local builder: stringbuilder 
   builder:write("len = ")
   builder:write(#self)
   builder:write("\n")
   for i=0,<#self do
       builder:write("# ")
       builder:write(self[i])
       builder:write("\n")
   end
   return builder:promote()
end

function pure_file:push_line(line: pure_line)
    self.content:push(line)
end

function pure_file:push_file(file: pure_file)
    for i=0,<#file do
        self:push_line(file[i])
    end
end

function pure_file:sub(start: integer, stop: integer): pure_file
    local ret: pure_file
    if stop >= start then -- This comparaison weeds out invalid subs
        for i=start,stop do
            ret:push_line(self[i])
        end
    end
    return ret
end

function pure_file:copy(): pure_file --Could be optimize by using the vector copy function but at the time of writing this I do not have the documentation available
    return self:sub(0,#self-1)
end

--Replace the jth word of the ith line with new_str
function pure_file:word_swap(i: integer, j: integer, new_str: string)--: pure_file
    local ret = self:sub(0, i-1)
    local interesting_line = self[i]
    interesting_line.content[j] = new_str
    ret:push_line(interesting_line)
    ret:push_file(self:sub(i+1,#self-1))
    return ret
end

--------------------------------- Private symbols ------------------------------

--tells if a character is whitespace
local function is_whitespace(s: string): boolean
    local c = s:byte()
    return not (c > 0x20 and c < 0x7F)
end

--Transforms a line in a pure_line
--Stop if a comment_delimiter is found and saturates
--at max_number_of_words
local function purify_line(s: string): pure_line
    local in_word = false
    local ret: pure_line
    ret.len = 0
    local pointer = 1 --Note, strings are 1-indexed so the pointer is set to 1
    local curr_word_start: integer
    while pointer <= #s and #ret < max_number_of_words-1 do --Note: the -1 is to ensure that we can add an other word after the lop
        local curr_char = s:sub(pointer, pointer)
        if curr_char == comment_delimiter then
            break
        end
        if in_word then
            if is_whitespace(curr_char) then
                ret.content[#ret] = s:sub(curr_word_start, pointer-1)
                ret.len = #ret + 1
                in_word = false
            end
        else
            if not is_whitespace(curr_char) then
                in_word = true
                curr_word_start = pointer
            end
        end
        pointer = pointer + 1
    end
    if in_word then
        ret.content[#ret] = s:sub(curr_word_start, pointer-1)
        ret.len = #ret + 1
    end
    return ret
end

----------------------------------- Public API ---------------------------------

--Convert a string into a pure file
--Split the string at each \n char
global function purify_string(s: string): pure_file
    local ret: pure_file
    local line_start = 1
    for i=1,#s do
        if s:sub(i,i) == "\n" then
            if i-1 >= line_start then
                ret.content:push(purify_line(s:sub(line_start, i-1)))
            else
                ret.content:push(purify_line(""))
            end
            line_start = i + 1
        end
    end
    if #s >= line_start then
        ret.content:push(purify_line(s:sub(line_start, #s)))
    end
    return ret
end

--Convert an open file into a pure file
--Close the file after the opperation
global function purify_file(file: filestream): pure_file
    local s = file:read("a")
    file:close()
    return purify_string(s)
end

